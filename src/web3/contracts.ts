// Generated by @wagmi/cli@1.3.0 on 8/3/2023 at 1:11:46 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RenotionToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const renotionTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'page', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'DomainRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'page', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'DomainUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paymentReceiver_', internalType: 'address', type: 'address' },
      { name: 'minPriceETH_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'domain_', internalType: 'bytes32', type: 'bytes32' }],
    name: 'metadataFor',
    outputs: [
      {
        name: '',
        internalType: 'struct RenotionToken.DomainInfo',
        type: 'tuple',
        components: [
          { name: 'hostname', internalType: 'string', type: 'string' },
          { name: 'page', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minPriceETH',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'domain_', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hostname_', internalType: 'string', type: 'string' },
      { name: 'page_', internalType: 'string', type: 'string' },
    ],
    name: 'register',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'domain_', internalType: 'bytes32', type: 'bytes32' },
      { name: 'page_', internalType: 'string', type: 'string' },
    ],
    name: 'update',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paymentReceiver_', internalType: 'address', type: 'address' },
      { name: 'minPriceETH_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__.
 */
export function useRenotionTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRenotionTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"getApproved"`.
 */
export function useRenotionTokenGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useRenotionTokenIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"metadataFor"`.
 */
export function useRenotionTokenMetadataFor<
  TFunctionName extends 'metadataFor',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'metadataFor',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"minPriceETH"`.
 */
export function useRenotionTokenMinPriceEth<
  TFunctionName extends 'minPriceETH',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'minPriceETH',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"name"`.
 */
export function useRenotionTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useRenotionTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useRenotionTokenOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRenotionTokenProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRenotionTokenSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useRenotionTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useRenotionTokenTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof renotionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof renotionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: renotionTokenABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof renotionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__.
 */
export function useRenotionTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof renotionTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, TFunctionName, TMode>({
    abi: renotionTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useRenotionTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'approve', TMode>({
    abi: renotionTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useRenotionTokenInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'initialize', TMode>({
    abi: renotionTokenABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"register"`.
 */
export function useRenotionTokenRegister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'register'
        >['request']['abi'],
        'register',
        TMode
      > & { functionName?: 'register' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'register', TMode> & {
        abi?: never
        functionName?: 'register'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'register', TMode>({
    abi: renotionTokenABI,
    functionName: 'register',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRenotionTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'renounceOwnership', TMode>({
    abi: renotionTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useRenotionTokenSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'safeTransferFrom', TMode>({
    abi: renotionTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useRenotionTokenSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'setApprovalForAll', TMode>({
    abi: renotionTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useRenotionTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'transferFrom', TMode>({
    abi: renotionTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRenotionTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'transferOwnership', TMode>({
    abi: renotionTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"update"`.
 */
export function useRenotionTokenUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'update'
        >['request']['abi'],
        'update',
        TMode
      > & { functionName?: 'update' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'update', TMode> & {
        abi?: never
        functionName?: 'update'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'update', TMode>({
    abi: renotionTokenABI,
    functionName: 'update',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"updateSettings"`.
 */
export function useRenotionTokenUpdateSettings<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'updateSettings'
        >['request']['abi'],
        'updateSettings',
        TMode
      > & { functionName?: 'updateSettings' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'updateSettings',
        TMode
      > & {
        abi?: never
        functionName?: 'updateSettings'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'updateSettings', TMode>({
    abi: renotionTokenABI,
    functionName: 'updateSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRenotionTokenUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof renotionTokenABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'upgradeTo', TMode>({
    abi: renotionTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRenotionTokenUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof renotionTokenABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof renotionTokenABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof renotionTokenABI, 'upgradeToAndCall', TMode>({
    abi: renotionTokenABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__.
 */
export function usePrepareRenotionTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareRenotionTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRenotionTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareRenotionTokenRegister(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'register'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'register',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'register'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRenotionTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof renotionTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareRenotionTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof renotionTokenABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareRenotionTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof renotionTokenABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareRenotionTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRenotionTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof renotionTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"update"`.
 */
export function usePrepareRenotionTokenUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'update'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'update',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'update'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"updateSettings"`.
 */
export function usePrepareRenotionTokenUpdateSettings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'updateSettings'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'updateSettings',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'updateSettings'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRenotionTokenUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof renotionTokenABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link renotionTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRenotionTokenUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof renotionTokenABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: renotionTokenABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof renotionTokenABI,
    'upgradeToAndCall'
  >)
}
